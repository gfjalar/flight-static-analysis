#!/usr/bin/env node

var fs = require('fs');
var through = require('through');
var split = require('split');
var store = require('dirty-store');
var _ = require('lodash');

var falafel = require('falafel');
var opt = require('optimist')
    .usage([
      'Analyse Twitter Flight code. Listens to stdin, pipes JSON to stdout.',
      '',
      '  echo "./path/to/file.js" | flight-static-analysis',
      '',
      'Reccommended usage:',
      '  tree-watch ./path/to/flight/code "**/*.js" | flight-static-analysis | json-stream-(socket|server)'
    ].join('\n'))
    .alias('i', 'instances')
    .describe('i', 'Include instance data, if plugin supports it.')
    .alias('h', 'help')
    .describe('h', 'Show this help message')
var argv = opt.argv;

if (argv.h) {
  return opt.showHelp();
}

/**
 * Read a file with utf-8 encoding.
 * TODO make this a bound-right fn: fs.readFileSync.bindRight(fs, { ... })?
 */
var read = function (f) {
  return fs.readFileSync(f, {
    encoding: 'utf-8'
  });
};

/**
 * Grab a plugin
 */
var plugin = function (name) {
  try {
    return require('./plugin/' + name);
  } catch (e) {
    return function (file, node, data) {
      var error = data.get('error') || [];
      error.push('Missing plugin "' + name + '"')
      data.set('error', error);
    };
  }
};

/**
 * Default plugins.
 * TODO make this come from args
 */
var plugins = [
  //'inspect',
  'name',
  'event',
  'unbind',
  'mixin',
  'advice',
  'dependency',
  'method',
  'defaultAttrs',
  'defaultAttrsCount',
  'requiredDefaultAttrs',
  'attributes',
  'attributesCount',
  'requiredAttributes',
  'initialisation',
  'selector',
  'domClimbing',
];

var processFile = function (file) {
  // Create a new store for this file
  var data = Object.create(store).init();

  // Depth-first traversal of the file's AST
  falafel(file, { loc: true }, function (node) {
    plugins.forEach(function (pluginName) {
      plugin(pluginName)(file, node, data, argv);
    });
  });

  return data.toObject();
};

var output = function (name, data) {
  return JSON.stringify({
    name: name,
    data: data
  }) + '\n';
};

var processLine = function (filename) {
  if (!filename.length) return;

  // Read & process the file, then queue the result
  try {
    this.queue(output(filename, processFile(read(filename))));
  } catch (e) {
    this.queue(output(filename, {
      error: {
        message: 'Failed to process ' + filename,
        stack: e.stack
      }
    }));
  }
};

process.stdin
  .pipe(split())
  .pipe(through(processLine))
  .pipe(process.stdout);
